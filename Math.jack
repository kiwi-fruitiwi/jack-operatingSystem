// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    }

    /** Returns the product of x and y. 
        When a Jack compiler detects the multiplication operator '*' in the 
        program's code, it handles it by invoking this method. In other words,
        the Jack expressions x*y and multiply(x,y) return the same value.

        Regardless of overflow, he binary shift addition algorithm always 
        returns the correct answer modulo 2^16.

        As long as the inputs are two's complement values, mult works as-is
      */
    function int multiply(int x, int y) {
        /* multiplication follows the bit shift addition algorithm:
            add shifted versions of the larger multiplicand whenever bits of
            the smaller multiplicand equal 1


            multiply(x, y):
                /* determine which is smaller
                    then assign that to y, other to x? */

                /* how do we determine number of bits in y? */

                sum = 0
                shiftedX = x
                for i=0, w-1 do:

                    // use bit(int x, int i)
                    if the iᵗʰ bit of y is 1:
                        sum += shiftedX
                    shiftedX *=2
                return sum
        */


    }

    /** Returns the integer part of x/y.
        When a Jack compiler detects the multiplication operator '/' in the 
        program's code, it handles it by invoking this method. In other words,
        the Jack expressions x/y and divide(x,y) return the same value.
      */
    function int divide(int x, int y) {
        // handle negative numbers by dividing abs(x) by abs(y) → set sign

        /* pseudocode
            divide(x, y):
                if y > x or y < 0: // overflow occurs when y is suddenly negative
                    return 0

                // this line can be rewritten x < (2q+1)*y to be more clear
                if x - 2 * q * y < y:
                    return 2 * q
                else:
                    return 2 * q + 1

         */
    }

    /** Returns the integer part of the square root of x. 

        Strategy: find integer y such that y² ≤ x < (y+1)² for 0 ≤ x < 2ⁿ by
            performing binary search in range [0, 2^n/2 - 1]
      */
    function int sqrt(int x) {
        /*
            def sqrt(x):
                y = 0
                find smallest 2ⁿ > x
                for j = n/2 - 1 ... 0 do:
                    if (y+2^j)² ≤ x and (y+2^j)² ≤ 0:
                        // second condition is to check for overflow
                        // two'ss complement overflow means negative numbers
                        y = y + 2^j
                return y

        */
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    }
}
